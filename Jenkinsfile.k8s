pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    env.TEST_IP = "172.28.112.1"
                    env.ANSIBLE_IP = "192.168.56.101"
                    env.DEPLOY_IP = "54.236.77.39"
                }
                sh 'echo "Performing cleanup..."'
                sh 'mv -tomerkul-myflaskproject-k8s.git tomerkul-myflaskproject-k8s.git'
                sh 'sudo rm -rf *'
            }
        }
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone https://github.com/tomerkul/tomerkul-myflaskproject-k8s.git'
                sh 'ls'
            }
        }

        stage('Upload to Docker Hub') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'SSH_VM', keyFileVariable: 'KEY_FILE')]) {
                    sshagent(['SSH_VM']) {
                        sh '''
                            
                            ssh-keyscan $ANSIBLE_IP >> /var/lib/jenkins/.ssh/known_hosts
                            ssh -o StrictHostKeyChecking=no -i $KEY_FILE tomer@$ANSIBLE_IP '
                                   cd /home/tomer/myflaskproject-k8s/tomerkul-myflaskproject-k8s/sample-flask/application
                                   python3 findlastversion.py
                                   cd /home/tomer/myflaskproject-k8s/tomerkul-myflaskproject-k8s/sample-flask/db
                                   python3 findlastversionSQl.py
                                   
                                '
                        '''
                    }
                }
            }
        }
        stage('Testing') {
                    steps {
                        sh 'kubectl apply -f /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/k8sFiles/kubemyflask.yaml'
                    }
                }
    }
}
