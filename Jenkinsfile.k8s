pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Project_ID', variable: 'Project_id')]) {
                        env.Project = "${Project_id}"
                    }
                }
                sh 'echo "Performing cleanup..."'
                sh 'sudo rm -rf *'
            }
        }
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone https://github.com/tomerkul/tomerkul-myflaskproject-k8s.git'
                sh 'ls'
            }
        }
        stage('Check for New Commits') {
            steps {
                script {
                    def sampleFlaskDir = "tomerkul-myflaskproject-k8s/sample-flask"

                    // Enter the sample-flask directory
                    dir(sampleFlaskDir) {
                        // Fetch the latest commits from the remote repository
                        sh 'git fetch origin'

                        // Get the latest commit hash of the current branch
                        def currentCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()

                        // Get the latest commit hash from the remote branch
                        def latestRemoteCommit = sh(returnStdout: true, script: 'git rev-parse origin/main').trim()

                        if (currentCommit == latestRemoteCommit) {
                            echo "No new commits detected in the sample-flask directory."
                            currentBuild.result = 'SUCCESS'
                        } else {
                            echo "New commits detected in the sample-flask directory. Continuing to the next stage."
                        }
                    }
                }
            }
        }
        stage('Upload to Docker Hub') {
            steps {
                sh ''' 
                    sudo systemctl restart docker.service docker.socket
                    python3 /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/sample-flask/del_old_ver.py
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/sample-flask/application/
                    python3 findlastversion.py
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/sample-flask/db/
                    python3 findlastversionSQl.py    
                '''
            }
        }
        stage('Upload to Testing server') {
            steps {
                sh '''
                    kubectl config use-context rancher-desktop
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/
                    python3 get_highest_version.py
                    sudo rm -rf charts/*
                    sudo helm package . --destination charts/
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/charts
                    sudo helm repo index . --url gs://helm_server
                    gsutil cp *  gs://helm_server
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/
                    bash install.sh
                    sleep 120
                    bash /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/tests/tests.sh
                '''
            }
        }

        stage('Preparing Cluster') {
            steps {
                sh '''
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/terraform_files
                    terraform init
                    terraform refresh
                    terraform apply -auto-approve
                '''
            }
        }
        stage('Confirmation') {
            steps {
                input(message: 'Confirm the deployment?', ok: 'Deploy', submitter: 'tomer_kuilsh')
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([string(credentialsId: 'git_hub_token', variable: 'token')]) {
                    script {
                        def username = "tomerkul"
                        def repo = "deployment"
                        def sourceBranch = "main"

                        def repoUrlWithAuth = "https://${username}:${token}@github.com/${username}/${repo}.git"

                        sh """
                            git clone ${repoUrlWithAuth} deployment
                            cd deployment/helm
                            python3 get_highest_version.py
                            git add .
                            git commit -m 'values.yaml update' --allow-empty
                        """
                        
                        // Change to the repository directory
                        dir('deployment/helm') {
                            try {
                                sh "git push origin $sourceBranch --force"
                                echo "Deployment successful."
                            } catch (Exception e) {
                                echo "Nothing new to commit. Deployment is up to date."
                                currentBuild.result = 'SUCCESS' // Mark the build as successful
                            }
                        }
                    }
                }
            }
        }
    }
}
