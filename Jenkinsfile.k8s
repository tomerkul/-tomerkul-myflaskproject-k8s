pipeline {
    agent any
    triggers {
        pollSCM('*/5 * * * *')
    }
    environment {
        GITHUB_TOKEN = credentials('YourGitHubTokenID')
    }
    stages {
        stage('Cleanup') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'Project_ID', variable: 'Project_id')]) {
                    env.Project = "${Project_id}"
}
}
                sh 'echo "Performing cleanup..."'
                sh 'sudo rm -rf *'
            }
        }
        stage('Clone') {
            steps {
                sh 'echo "Building..."'
                sh 'git clone https://github.com/tomerkul/tomerkul-myflaskproject-k8s.git'
                sh 'ls'
            }
        }

        stage('Upload to Docker Hub') {
            steps {
                sh ''' 
                    sudo systemctl restart docker.service docker.socket
                    python3 /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/sample-flask/del_old_ver.py
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/sample-flask/application/
                    python3 findlastversion.py
                    cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/sample-flask/db/
                    python3 findlastversionSQl.py    
                '''
            }
        }
        stage('Upload to Testing server') {
            steps {
                sh '''
                  kubectl config use-context rancher-desktop
                  cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/
                  python3 get_highest_version.py
                  sudo rm -rf charts/*
                  sudo helm package . --destination charts/
                  cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/charts
                  sudo helm repo index . --url gs://helm_server
                  gsutil cp *  gs://helm_server
                  cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/
                  bash install.sh
                  sleep 120
                  bash /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/tests/tests.sh
                '''
            }
        }

         stage('Preparing Cluster') {
            steps {

                            sh '''
                            cd /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/terraform_files
                            terraform init
                            terraform refresh
                            terraform apply -auto-approve
                            '''

            }
        }
         stage('Confirmation') {
            steps {
                input(message: 'Confirm the deployment?', ok: 'Deploy', submitter: 'tomer_kuilsh')
            }
        }
        stage('Deploy') {

             script {
                    def githubUrl = "https://api.github.com/tomerkul/deployment/blob/main/helm/values.yaml"
                    def githubToken = credentials('GITHUB_TOKEN')
                    
                    def response = sh(script: """
                        curl -X GET -u \$githubToken:x-oauth-basic \$githubUrl
                    """, returnStatus: true)

                    if (response == 200) {
                        def base64Content = sh(script: """
                            python3 /var/lib/jenkins/workspace/first_pipeline-k8s/tomerkul-myflaskproject-k8s/helm/get_highest_version.py < values.yaml | base64
                        """, returnStdout: true).trim()

                        def payload = """
                        {
                            "message": "Update values.yaml",
                            "content": "${base64Content}",
                            "branch": "main"
                        }
                        """

                        sh(script: """
                            curl -X PUT -u \$githubToken:x-oauth-basic -d '${payload}' \$githubUrl
                        """)
                        echo "values.yaml updated successfully."
                    } else {
                        echo "Error: Failed to fetch the existing file."
                    }
                }
            }
    }
}

